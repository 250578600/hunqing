<?php
/**
 * 示例
 * 【注意】该文件为示例，仅供参考学习，请不要将该文件包含在商户系统代码中
 * 【重要】各传入参数SDK都不作任何检查、过滤，请务必在传入前进行安全检查或过滤，特别是生成HTML代码的方法，务必保证传入参数的安全性，否则会导致安全问题。
 * @author xiezz
 * @version 1.0.12
 * @date 2015-10-28
 */


die('<html><head><meta http-equiv="content-type" content="text/html;charset=utf-8"></head><body>该页面是示例，请直接打开PHP源文件查看收付直通车API调用示例。不要在浏览器中访问。</body></html>');

// 在调用任何API之前，你必须定义一个$epay_config数组，里面包含收付直通车需要的参数
// 这里把参数都写在epay.config.php文件中，然后直接包含
require_once('epay.config.php');

// 收付直通车API类
// 【注意】如果该类文件在其它路径的话，请自行替换
require_once('lib/epay_core.class.php');


// ====================== 快捷支付示例 ======================

// 示例中用到的一些变量
$order_date	= EPay_util::getDate();			//交易日期，格式：yyyyMMdd
$acct_type	= "0";							//银行账户类型：0-储蓄卡，1-信用卡，2-企业账户
$card_no	= "6222801234567888953";		//账户号，这里是测试卡号
$bank_no	= "105100000017";				//人行联网行号，这里是测试卡号对应的银行


// 实例化EPay类
$epay		= new EPay($epay_config);



// ================ 【Ex.1-1 快捷支付认证（异步）】 ================
// 
// 流程：商户根据业务信息生成快捷支付认证请求 -> 将html和js代码展示给用户 -> 用户浏览器跳转至收付直通车进行快捷认证
// 回调：认证成功后 -> 收付直通车 -> 回调商户服务器的URL
// 注意：每个银行卡（card_no）在支付交易前都需要进行认证操作

// 商户系统跟踪号，商户系统生成，后续可根据该值调用查询接口查询认证情况
// 这里使用TN+当前时间的格式，商户可以自定义
$trac_no	= "TN".EPay_util::getDateTime();

// 根据$trac_no, $acct_type, $bank_no, $card_no四个变量生成用户跳转的整个页面的HTML代码。
// 注意：该函数生成的是跳转的中间页面的整页HTML代码，因此不要在该中间跳转页中输出其它的内容。
// 重要：各传入参数SDK都不作任何检查、过滤，请务必在传入前进行安全检查或过滤，保证传入参数的安全性，否则会导致安全问题。
// 具体使用示例可以参看epay_redirect.php中的源码。
// 该页面会在显示给用户的瞬间跳转至收付直通车快捷认证页面，上面的内容用户一般不会看到。
$ex1_1html	= $epay -> epAuth($trac_no, $acct_type, $bank_no, $card_no);
// 如果需要固定其它某些值，如手机号，则可以送对应的参数：
$ex1_1html_	= $epay -> epAuth($trac_no, $acct_type, $bank_no, $card_no, null ,null, '18500000000', null, null);
echo $ex1_1html;
// 因该示例需要用户交互，可以访问或查看index.php中Ex.1-1示例


// ================ 【Ex.1-2 快捷支付认证（同步，短信验证）】 ================
// 流程：商户系统 --post（认证请求）--> 收付直通车，收付直通车 --短信--> 持卡人，商户系统 --post（短信确认）--> 收付直通车

// 注意：每个银行卡（card_no）在支付交易前都需要进行认证操作，借记卡最后两个参数请置null
$ex1_2aresult	= $epay -> epAuthSyncWithSms($trac_no, $acct_type, $bank_no, $card_no, $user_name, $cert_no, $card_phone, null, null);
// 返回结果为JSON格式的字符串，具体含义请参看收付直通车代收接口文档

// 当认证信息正确时，收付直通车会往持卡人手机号上发送一条带6位数字的短信验证码，
// 商户系统在收到持卡人填写的短信验证码后，调用短信确认接口完成快捷认证整个过程。
$ex1_2bresult	= $epay -> epAuthCheckSms($trac_no, '123456');
// 返回结果为JSON格式的字符串，具体含义请参看收付直通车代收接口文档
// 注意，只有调用确认接口正确完成后，才能使用此卡进行支付操作。


// ================ 【Ex.1-3 快捷认证解绑】 ================
//
// 流程：商户系统 --post--> 收付直通车

// 这里$card_no是待解绑的账号，解绑后，如果该卡需要继续支付，需要重新调用快捷认证接口并认证成功后方可支付。
$ex1_3result	= $epay -> epAuthCancel($card_no);
// 返回结果为JSON格式的字符串，具体含义请参看收付直通车代收接口文档


// ================ 【Ex.1-4 快捷认证结果查询】 ================
//
// 流程：商户系统 --post--> 收付直通车

// 这里$trac_no是Ex.1-1或Ex.1-2中调用认证接口的商户系统跟踪号
$ex1_4result	= $epay -> epAuthQuery($trac_no);
// 返回结果为JSON格式的字符串，具体含义请参看收付直通车代收接口文档


// ================ 【Ex.1-5 快捷支付交易】 ================
//
// 流程：商户系统 --post--> 收付直通车
// 【注意】对于每个银行卡（card_no），在支付前，必须成功进行过快捷支付认证（调用Ex.1-1或Ex.1-2中接口进行认证），否则会支付失败

// $order_no是商户订单号，由商户系统生成，应当注意订单号在商户系统中应当全局唯一，即不会出现两笔订单有相同的订单号
$order_no 		= "SDK".EPay_util::getDateTime();			//这里示例使用SDK20150806010203格式的订单号
$order_amount	= "1.00";									//支付金额
$order_title	= "SDK支付示例";								//订单标题
$order_desc		= "这笔订单是由SDK发起的示例订单";			//订单详情

$ex1_5result	= $epay -> epPay($order_no, $order_amount, $order_title, $order_desc, $card_no);
// 返回结果为JSON格式的字符串，具体含义请参看收付直通车代收接口文档


// ================ 【Ex.1-6 快捷支付交易结果查询】 ================
//
// 流程：商户系统 --post--> 收付直通车
// 实际环境中可能由于网络环境等问题导致商户未收到支付结果通知，商户系统可以使用该接口查询订单的支付结果

// 当第二个参数$order_date省略时，为查询当天订单
$ex1_6result		= $epay -> epQuery($order_no);					//$order_no为调用epPay(...)时的订单号
$ex1_6result 		= $epay -> epQuery($order_no, $order_date);		//$order_date为发起交易的日期
// 返回结果为JSON格式的字符串，具体含义请参看收付直通车代收接口文档


// ================ 【Ex.1-7 快捷支付退款交易】 ================
//
// 流程：商户系统 --post--> 收付直通车

// 这里的$order_no是待退款订单号，$order_date是订单交易日期（注意不是退款的日期），
// $order_amount是退款金额，支持部分退款，但每笔成功的订单只能退款一次
$ex1_7result		= $epay -> epRefund($order_no, $order_date, $order_amount);
// 返回结果为JSON格式的字符串，具体含义请参看收付直通车代收接口文档


// ================ 【Ex.1-8 快捷支付退款结果查询】 ================
//
// 流程：商户系统 --post--> 收付直通车
// 实际环境中可能由于网络环境等问题导致商户未收到退款结果，商户系统可以使用该接口查询退款结果

// 当第二个参数$order_date省略时，为查询当天发起的退款的结果
$ex1_8result		= $epay -> epRefundQuery($order_no);				//$order_no为调用epRefund(...)时的订单号
$ex1_8result		= $epay -> epRefundQuery($order_no, $order_date);	//$order_date为发起退款的日期
// 返回结果为JSON格式的字符串，具体含义请参看收付直通车代收接口文档


// ================ 【Ex.1-9 无绑定账户的快捷支付接口（异步）】 ================
//
// 流程：商户根据业务信息生成支付请求 -> 将html和js代码展示给用户 -> 用户浏览器跳转至收付直通车页面进行支付
// 该快捷支付接口不需要对银行卡提前进行认证，用户跳转至收付直通车支付页面时，同时进行认证和支付的操作
// 回调：支付成功后 -> 收付直通车 -> 回调商户服务器的URL

// $remote_ip为用户IP地址（客户端），其它参数含义同上，可以从$_SERVER['REMOTE_ADDR']中获取:
// 例：$remote_ip	= $_SERVER['REMOTE_ADDR'];

// 注意：该函数生成的是跳转的中间页面的整页HTML代码，因此不要在该中间跳转页中输出其它的内容。
// 重要：各传入参数SDK都不作任何检查、过滤，请务必在传入前进行安全检查或过滤，保证传入参数的安全性，否则会导致安全问题。
// 具体使用示例可以参看epay_redirect.php中的源码。
// 该页面会在显示给用户的瞬间跳转至收付直通车快捷认证页面，上面的内容用户一般不会看到。
$ex1_9html		= $epay -> epAuthPay($order_no, $order_amount, $order_title, $order_desc, $remote_ip);
// 如果需要固定其它某些值，如手机号，则可以送对应的参数：
$ex1_9html		= $epay -> epAuthPay($order_no, $order_amount, $order_title, $order_desc, $remote_ip, null, null, null, null, null, "18800000000", null, null);
// 因该示例需要用户交互，可以访问或查看index.php中Ex.1-9示例


// ================ 【Ex.1-10 快捷支付认证（同步）】 ================
// 注意：该接口仅针对内部商户开放
// 流程：商户系统 --post--> 收付直通车

// 注意：每个银行卡（card_no）在支付交易前都需要进行认证操作，借记卡最后两个参数请置null
$ex1_10result	= $epay -> epAuthSync($trac_no, $acct_type, $bank_no, $card_no, $user_name, $cert_no, $card_phone, null, null);
// 返回结果为JSON格式的字符串，具体含义请参看收付直通车代收接口文档


// ====================== 网关支付示例 ======================

// ================ 【Ex.2-1 网关支付（异步）】 ================
//
// 流程：商户根据业务信息生成网关支付请求 -> 将html和js代码展示给用户 -> 用户浏览器跳转至收付直通车进行网关支付
// 回调（前台）：网银支付成功后 -> 收付直通车显示支付成功页面 -> 用户点击，带参数跳转到商户服务器的回调URL
// 回调（后台）：支付成功后 -> 收付直通车 --post--> 商户服务器回调URL

// $order_no是商户订单号，由商户系统生成，应当注意订单号在商户系统中应当全局唯一，即不会出现两笔订单有相同的订单号
$order_no		= "SDK".EPay_util::getDateTime();			//这里示例使用SDK20150806120001格式的订单号

// $remote_ip为用户IP地址（客户端），其它参数含义同上，可以从$_SERVER['REMOTE_ADDR']中获取:
// 例：$remote_ip	= $_SERVER['REMOTE_ADDR'];

$order_amount	= "1.00";									//支付金额
$order_title	= "SDK支付示例";								//订单标题
$order_desc		= "这笔订单是由SDK发起的示例订单";			//订单详情

// 注意：该函数生成的是跳转的中间页面的整页HTML代码，因此不要在该中间跳转页中输出其它的内容。
// 重要：各传入参数SDK都不作任何检查、过滤，请务必在传入前进行安全检查或过滤，保证传入参数的安全性，否则会导致安全问题。
// 具体使用示例可以参看epay_redirect.php中的源码。
// 该页面会在显示给用户的瞬间跳转至收付直通车网关支付页面，上面的内容用户一般不会看到。
$ex2_1html		= $epay -> gpPay($order_no, $order_amount, $order_title, $order_desc, $remote_ip);
echo $ex2_1html;
// 因该示例需要用户交互，可以访问或查看index.php中Ex.2-1示例


// ================ 【Ex.2-2 网关支付交易结果查询】 ================
//
// 流程：商户系统 --post--> 收付直通车
// 实际环境中可能由于网络环境等问题导致商户未收到支付结果通知，商户系统可以使用该接口查询订单的支付结果

// 当第二个参数$order_date省略时，为查询当天订单
$ex2_2result		= $epay -> gpQuery($order_no);					//$order_no为调用gpPay(...)时的订单号
$ex2_2result		= $epay -> gpQuery($order_no, $order_date);		//$order_date为发起交易的日期
// 返回结果为JSON格式的字符串，具体含义请参看收付直通车代收接口文档


// ================ 【Ex.2-3 网关支付退款交易】 ================
//
// 流程：商户系统 --post--> 收付直通车

// 这里的$order_no是待退款订单号，$order_date是订单交易日期（注意不是退款的日期），
// $order_amount是退款金额，支持部分退款，但每笔成功的订单只能退款一次
$ex2_3result		= $epay -> gpRefund($order_no, $order_date, $order_amount);
// 返回结果为JSON格式的字符串，具体含义请参看收付直通车代收接口文档


// ================ 【Ex.2-4 网关支付退款结果查询】 ================
//
// 流程：商户系统 --post--> 收付直通车
// 实际环境中可能由于网络环境等问题导致商户未收到退款结果，商户系统可以使用该接口查询退款结果

// 当第二个参数$order_date省略时，为查询当天订单
$ex2_4result		= $epay -> gpRefundQuery($order_no);				//$order_no为调用epRefund(...)时的订单号
$ex2_4result		= $epay -> gpRefundQuery($order_no, $order_date);	//$order_date为发起退款的日期
// 返回结果为JSON格式的字符串，具体含义请参看收付直通车代收接口文档



// ====================== 文件下载示例 ======================

// ================ 【Ex.3-1 智能代付单笔付款】 ================
//
// 流程：商户系统 --post--> 收付直通车
// $order_no是商户订单号，由商户系统生成，应当注意订单号在商户系统中应当全局唯一，即不会出现两笔订单有相同的订单号

$order_no       = "SDK" + DateTimeUtil.getDateTime();       //这里示例使用SDK20150806120001格式的订单号
$trans_amt      = "10.00";                                  //支付金额
$to_bank_no     = "309391000011";                           //收款行行号
$to_acct_no     = "622909115001762912";                     //收款人账号
$to_acct_name   = "华英雄";                                 //收款人户名
$trans_usage    = "这笔订单是由SDK发起的示例订单";          //订单详情

$ex3_1result    = $epay -> pyPay($order_no, $to_bank_no, $to_acct_no, $to_acct_name, '0', $trans_amt, $trans_usage);
// 返回结果为JSON格式的字符串，具体含义请参看收付直通车代收接口文档


// ================ 【Ex.3-2 智能代付交易结果查询】 ================
//
// 流程：商户系统 --post--> 收付直通车
// 对于交易状态为“支付中”的交易，商户系统可以使用该接口查询订单的支付结果

$ex3_2result    = $epay -> pyQuery($order_no);              //order_no为调用$epay -> pyPay(...)时的订单号
// 返回结果为JSON格式的字符串，具体含义请参看收付直通车代收接口文档


// ================ 【Ex.3-3 智能代付商户信息查询】 ================
//
// 流程：商户系统 --post--> 收付直通车
// 注意：查询的商户信息为本商户信息

$ex3_3result    = $epay -> pyGetMrch();
// 返回结果为JSON格式的字符串，具体含义请参看收付直通车代收接口文档



// ====================== 文件下载示例 ======================

// ================ 【Ex.4-1 对账文件下载】 ================
//
// 流程：商户系统 --post--> 收付直通车
// 用于下载对账文件，下载的文件为一个zip压缩包，压缩包内内容请参看收付直通车代收接口文档。
// 下载的文件会写入调用者指定的文件中，采用覆盖模式。请确保该文件路径有写权限，且文件原内容不再需要使用。
// API返回调用结果，若下载成功，返回$epay_config['SUCCESS_RESULT']值，若失败，返回具体原因。

$rcpt_type		= "0";			//$rcpt_type 回单类型：0-快捷入账回单；1-快捷出账回单；2-快捷手续费回单；3-网关支付入账回单；4-网关支付出账回单；5-网关支付手续费回单；6-代付入账回单；7-代付出账回单；8-代付手续费回单

// $order_date 指定需要下载的对账文件的日期，最后一个参数为保存的文件名
$ex4_1result		= $epay -> dlSettleFile($rcpt_type, $trans_date, 'f:/test.zip');
// 下载成功时返回$epay_config['SUCCESS_RESULT']的值，失败返回含原因的JSON字符串


// ================ 【Ex.3-2 行号文件下载】 ================
//
// 流程：商户系统 --post--> 收付直通车
// 用于下载人行行号与行名对应关系文件，该文件为一个zip压缩包。行号文件建议商户系统每天同步更新一次。
// 下载的文件会写入调用者指定的文件中，采用覆盖模式。请确保该文件路径有写权限，且文件原内容不再需要使用。
// API返回调用结果，若下载成功，返回$epay_config['SUCCESS_RESULT']值，若失败，返回具体原因。

$download_type	= '01';			//文件类型：01-行号文件

// 最后一个参数为保存的文件名
$ex4_2result		= $epay -> dlFile($download_type, 'f:/bank.zip');
// 下载成功时返回$epay_config['SUCCESS_RESULT']的值，失败返回含原因的JSON字符串
